# buildifier: disable=load-on-top

workspace(name = "wheel_test")

# buildifier: disable=load-on-top

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "bazel_skylib",
    sha256 = "74d544d96f4a5bb630d465ca8bbcfe231e3594e5aae57e1edbf17a6eb3ca2506",
    urls = [
        "https://storage.googleapis.com/mirror.tensorflow.org/github.com/bazelbuild/bazel-skylib/releases/download/1.3.0/bazel-skylib-1.3.0.tar.gz",
        "https://github.com/bazelbuild/bazel-skylib/releases/download/1.3.0/bazel-skylib-1.3.0.tar.gz",
    ],
)

http_archive(
    name = "rules_python",
    sha256 = "9d04041ac92a0985e344235f5d946f71ac543f1b1565f2cdbc9a2aaee8adf55b",
    strip_prefix = "rules_python-0.26.0",
    url = "https://github.com/bazelbuild/rules_python/releases/download/0.26.0/rules_python-0.26.0.tar.gz",
)

# buildifier: disable=same-origin-load
load("@rules_python//python:repositories.bzl", "py_repositories")
# Load the interpreter
# load("@rules_python//python:defs.bzl", "interpreter")

py_repositories()

## Load HERMETIC_PYTHON_VERSION variable
local_repository(
    name = "local_tensorflow",
    path = "../../..",
)

load(
    "@local_tensorflow//tensorflow/tools/toolchains/python:python_repo.bzl",
    "python_repository"
)

# The value of the "py_runtime_path" has to changed based on the "os" that is being used.
# There is a standard that has to be followed that is set by "bazel", for smooth execution.
# For "Linux", it is "/usr/bin/python3".
# For "Windows", it is "C:/Python311/python.exe" - The python version has to be downloaded based
# on the task at time. Usually, the "Latest version" will be used. 

# The pattern is already mentioned in the cpu_win_test.sh file as the value for the variable
# "NATIVE_PYTHON_LOCATION". We have to follow that pattern and use as the interpreter path for bazel.

# The path havs to be absolute, and the same path has to be saved as one of the "Environment Variable" 
# as well.

# This file - WORKSPACE is the only place where "bazel" will get the information about "interpreter" and
# its "path". So if not set accurately, the "target" will not be detected correctly, and the build will fail.
python_repository(
    name = "python_version_repo",
    py_runtime_path = "C:/Python311/python.exe"
)

load("@python_version_repo//:py_version.bzl", "TF_PYTHON_VERSION")

# Register multi toolchains
load("@rules_python//python:repositories.bzl", "python_register_toolchains")  # buildifier: disable=same-origin-load

python_register_toolchains(
    name = "python",
    ignore_root_user_error = True,
    python_version = TF_PYTHON_VERSION,
)

load("@python//:defs.bzl", "interpreter")
load("@rules_python//python:pip.bzl", "pip_parse")

pip_parse(
    name = "pypi",
    python_interpreter_target = "@python_version_repo//:py3_runtime",
    requirements = "//:requirements_lock_" + TF_PYTHON_VERSION.replace(".", "_") + ".txt",
)

load("@pypi//:requirements.bzl", "install_deps")

install_deps()
