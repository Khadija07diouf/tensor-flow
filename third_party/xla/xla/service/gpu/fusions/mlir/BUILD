load("//third_party/llvm/llvm-project/mlir:tblgen.bzl", "gentbl_cc_library")
load("//xla:xla.bzl", "xla_cc_test")

package(
    # copybara:uncomment default_applicable_licenses = ["//tensorflow:license"],
    default_visibility = [":friends"],
    licenses = ["notice"],
)

package_group(
    name = "friends",
    includes = [
        "//xla:friends",
    ],
)

cc_library(
    name = "computation_partitioner",
    srcs = ["computation_partitioner.cc"],
    hdrs = ["computation_partitioner.h"],
    deps = [
        ":type_util",
        "//third_party/llvm/llvm-project/llvm:Support",
        "//third_party/llvm/llvm-project/mlir:DataLayoutInterfaces",
        "//third_party/llvm/llvm-project/mlir:FuncDialect",
        "//third_party/llvm/llvm-project/mlir:IR",
        "//third_party/llvm/llvm-project/mlir:LLVMDialect",
        "//xla:shape_util",
        "//xla:union_find",
        "//xla/hlo/ir:hlo",
        "//xla/service/gpu:hlo_fusion_analysis",
        "//xla/service/gpu/fusions:fusion_emitter",
        "//xla/service/gpu/model:indexing_analysis",
        "//xla/service/llvm_ir:llvm_util",
        "//xla/translate/hlo_to_mhlo:hlo_utils",
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/container:node_hash_map",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:span",
    ],
)

xla_cc_test(
    name = "computation_partitioner_test",
    srcs = ["computation_partitioner_test.cc"],
    deps = [
        ":computation_partitioner",
        "//third_party/llvm/llvm-project/llvm:Support",
        "//third_party/llvm/llvm-project/mlir:FuncDialect",
        "//third_party/llvm/llvm-project/mlir:IR",
        "//xla/hlo/ir:hlo",
        "//xla/service/gpu/model:indexing_analysis",
        "//xla/tests:hlo_test_base",
        "//xla/tests:xla_internal_test_main",
        "@com_google_googletest//:gtest",
    ],
)

cc_library(
    name = "elemental_hlo_to_mlir",
    srcs = ["elemental_hlo_to_mlir.cc"],
    hdrs = ["elemental_hlo_to_mlir.h"],
    deps = [
        ":computation_partitioner",
        ":type_util",
        "//third_party/llvm/llvm-project/llvm:Support",
        "//third_party/llvm/llvm-project/mlir:AffineDialect",
        "//third_party/llvm/llvm-project/mlir:AffineUtils",
        "//third_party/llvm/llvm-project/mlir:ArithDialect",
        "//third_party/llvm/llvm-project/mlir:ComplexDialect",
        "//third_party/llvm/llvm-project/mlir:DataLayoutInterfaces",
        "//third_party/llvm/llvm-project/mlir:FuncDialect",
        "//third_party/llvm/llvm-project/mlir:IR",
        "//third_party/llvm/llvm-project/mlir:SCFDialect",
        "//third_party/llvm/llvm-project/mlir:Support",
        "//third_party/llvm/llvm-project/mlir:TensorDialect",
        "//third_party/llvm/llvm-project/mlir:VectorDialect",
        "//xla:comparison_util",
        "//xla:shape_util",
        "//xla:status_macros",
        "//xla/hlo/ir:hlo",
        "//xla/mlir/utils:type_util",
        "//xla/mlir_hlo",
        "//xla/mlir_hlo:map_mhlo_to_scalar_op",
        "//xla/mlir_hlo:type_conversion",
        "//xla/service:algorithm_util",
        "//xla/service/gpu:hlo_traversal",
        "//xla/service/gpu/fusions/mlir/ir:xla_gpu",
        "//xla/service/gpu/model:indexing_analysis",
        "//xla/service/llvm_ir:llvm_util",
        "//xla/stream_executor:device_description",
        "//xla/translate/hlo_to_mhlo:hlo_utils",
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/container:node_hash_map",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
        "@local_tsl//tsl/platform:errors",
        "@local_tsl//tsl/platform:statusor",
    ],
)

xla_cc_test(
    name = "elemental_hlo_to_mlir_test",
    srcs = ["elemental_hlo_to_mlir_test.cc"],
    deps = [
        ":computation_partitioner",
        ":elemental_hlo_to_mlir",
        "//third_party/llvm/llvm-project/llvm:Support",
        "//third_party/llvm/llvm-project/mlir:AffineDialect",
        "//third_party/llvm/llvm-project/mlir:AsmParser",
        "//third_party/llvm/llvm-project/mlir:DLTIDialect",
        "//third_party/llvm/llvm-project/mlir:FuncDialect",
        "//third_party/llvm/llvm-project/mlir:IR",
        "//third_party/llvm/llvm-project/mlir:LLVMDialect",
        "//third_party/llvm/llvm-project/mlir:MathDialect",
        "//third_party/llvm/llvm-project/mlir:Pass",
        "//third_party/llvm/llvm-project/mlir:SCFDialect",
        "//third_party/llvm/llvm-project/mlir:TensorDialect",
        "//third_party/llvm/llvm-project/mlir:Transforms",
        "//xla:status_macros",
        "//xla/hlo/ir:hlo",
        "//xla/mlir_hlo",
        "//xla/service:hlo_parser",
        "//xla/service/gpu:launch_dimensions",
        "//xla/service/gpu/fusions/mlir/ir:xla_gpu",
        "//xla/service/gpu/model:indexing_analysis",
        "//xla/service/llvm_ir:llvm_util",
        "//xla/stream_executor:launch_dim",
        "//xla/tests:filecheck",
        "//xla/tests:hlo_test_base",
        "//xla/tests:xla_internal_test_main",
        "@com_google_absl//absl/status",
        "@com_google_googletest//:gtest",
        "@local_tsl//tsl/lib/core:status_test_util",
        "@local_tsl//tsl/platform:errors",
        "@local_tsl//tsl/platform:statusor",
    ],
)

cc_library(
    name = "mlir_fusion_emitter",
    srcs = ["mlir_fusion_emitter.cc"],
    hdrs = ["mlir_fusion_emitter.h"],
    deps = [
        ":computation_partitioner",
        ":elemental_hlo_to_mlir",
        ":passes",
        ":type_util",
        "//third_party/llvm/llvm-project/llvm:Core",
        "//third_party/llvm/llvm-project/llvm:Linker",
        "//third_party/llvm/llvm-project/llvm:Support",
        "//third_party/llvm/llvm-project/llvm:ir_headers",
        "//third_party/llvm/llvm-project/mlir:AffineDialect",
        "//third_party/llvm/llvm-project/mlir:AffineToStandard",
        "//third_party/llvm/llvm-project/mlir:ArithDialect",
        "//third_party/llvm/llvm-project/mlir:BufferizationInterfaces",
        "//third_party/llvm/llvm-project/mlir:BuiltinToLLVMIRTranslation",
        "//third_party/llvm/llvm-project/mlir:ComplexToStandard",
        "//third_party/llvm/llvm-project/mlir:ControlFlowDialect",
        "//third_party/llvm/llvm-project/mlir:DLTIDialect",
        "//third_party/llvm/llvm-project/mlir:DataLayoutInterfaces",
        "//third_party/llvm/llvm-project/mlir:FuncDialect",
        "//third_party/llvm/llvm-project/mlir:FuncExtensions",
        "//third_party/llvm/llvm-project/mlir:GPUDialect",
        "//third_party/llvm/llvm-project/mlir:IR",
        "//third_party/llvm/llvm-project/mlir:LLVMDialect",
        "//third_party/llvm/llvm-project/mlir:LLVMToLLVMIRTranslation",
        "//third_party/llvm/llvm-project/mlir:MathDialect",
        "//third_party/llvm/llvm-project/mlir:MemRefTransforms",
        "//third_party/llvm/llvm-project/mlir:NVVMDialect",
        "//third_party/llvm/llvm-project/mlir:NVVMToLLVMIRTranslation",
        "//third_party/llvm/llvm-project/mlir:Pass",
        "//third_party/llvm/llvm-project/mlir:ReconcileUnrealizedCasts",
        "//third_party/llvm/llvm-project/mlir:SCFDialect",
        "//third_party/llvm/llvm-project/mlir:Support",
        "//third_party/llvm/llvm-project/mlir:TensorDialect",
        "//third_party/llvm/llvm-project/mlir:ToLLVMIRTranslation",
        "//third_party/llvm/llvm-project/mlir:Transforms",
        "//third_party/llvm/llvm-project/mlir:VectorDialect",
        "//xla:shape_util",
        "//xla:status_macros",
        "//xla:util",
        "//xla:xla_data_proto_cc",
        "//xla/hlo/ir:hlo",
        "//xla/mlir/tools/mlir_replay/public:compiler_trace_instrumentation",
        "//xla/mlir/tools/mlir_replay/public:compiler_trace_proto_cc",
        "//xla/mlir_hlo",
        "//xla/mlir_hlo:mhlo_passes",
        "//xla/service:buffer_assignment",
        "//xla/service:dump",
        "//xla/service/gpu:ir_emitter_context",
        "//xla/service/gpu:kernel_arguments",
        "//xla/service/gpu:kernel_reuse_cache",
        "//xla/service/gpu:launch_dimensions",
        "//xla/service/gpu:target_util",
        "//xla/service/gpu/fusions:fusion_emitter",
        "//xla/service/gpu/fusions/mlir/ir:xla_gpu",
        "//xla/service/gpu/model:indexing_analysis",
        "//xla/service/gpu/runtime:kernel_thunk",
        "//xla/service/llvm_ir:llvm_util",
        "//xla/stream_executor:device_description",
        "//xla/tsl/framework/mlir:status_scoped_diagnostic_handler",
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@local_tsl//tsl/platform:errors",
        "@local_tsl//tsl/platform:statusor",
    ],
)

xla_cc_test(
    name = "mlir_fusion_emitter_test",
    srcs = ["mlir_fusion_emitter_test.cc"],
    deps = [
        ":computation_partitioner",
        ":mlir_fusion_emitter",
        "//third_party/llvm/llvm-project/llvm:Support",
        "//third_party/llvm/llvm-project/llvm:ir_headers",
        "//third_party/llvm/llvm-project/mlir:AffineDialect",
        "//third_party/llvm/llvm-project/mlir:ArithDialect",
        "//third_party/llvm/llvm-project/mlir:BufferizationInterfaces",
        "//third_party/llvm/llvm-project/mlir:BuiltinToLLVMIRTranslation",
        "//third_party/llvm/llvm-project/mlir:ComplexDialect",
        "//third_party/llvm/llvm-project/mlir:FuncDialect",
        "//third_party/llvm/llvm-project/mlir:FuncExtensions",
        "//third_party/llvm/llvm-project/mlir:GPUDialect",
        "//third_party/llvm/llvm-project/mlir:IR",
        "//third_party/llvm/llvm-project/mlir:LLVMToLLVMIRTranslation",
        "//third_party/llvm/llvm-project/mlir:MathDialect",
        "//third_party/llvm/llvm-project/mlir:NVVMDialect",
        "//third_party/llvm/llvm-project/mlir:NVVMToLLVMIRTranslation",
        "//third_party/llvm/llvm-project/mlir:Pass",
        "//third_party/llvm/llvm-project/mlir:SCFDialect",
        "//third_party/llvm/llvm-project/mlir:TensorDialect",
        "//xla/hlo/ir:hlo",
        "//xla/mlir_hlo",
        "//xla/service/gpu:gpu_device_info_for_tests",
        "//xla/service/gpu:launch_dimensions",
        "//xla/service/gpu/model:indexing_analysis",
        "//xla/stream_executor:device_description",
        "//xla/tests:filecheck",
        "//xla/tests:hlo_test_base",
        "//xla/tests:xla_internal_test_main",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings:string_view",
        "@com_google_googletest//:gtest",
        "@local_tsl//tsl/platform:statusor",
    ],
)

gentbl_cc_library(
    name = "passes_inc_gen",
    tbl_outs = [
        (
            [
                "-gen-pass-decls",
                "-name=GpuFusionTransforms",
            ],
            "passes.h.inc",
        ),
    ],
    tblgen = "//third_party/llvm/llvm-project/mlir:mlir-tblgen",
    td_file = "passes.td",
    visibility = ["//visibility:private"],
    deps = ["//third_party/llvm/llvm-project/mlir:PassBaseTdFiles"],
)

cc_library(
    name = "passes",
    srcs = [
        "convert_xla_gpu_pure_call_ops.cc",
        "erase_dead_functions.cc",
        "expand_float_ops.cc",
        "lower_tensors.cc",
        "lower_to_llvm.cc",
        "lower_xla_gpu_to_scf.cc",
        "merge_pointers_to_same_slice.cc",
        "optimize_loops.cc",
        "propagate_slice_indices.cc",
        "simplify_affine.cc",
        "simplify_arith.cc",
        "unswitch_loops.cc",
        "vectorize_loads_stores.cc",
    ],
    hdrs = ["passes.h"],
    deps = [
        ":passes_inc_gen",
        "//third_party/llvm/llvm-project/llvm:Support",
        "//third_party/llvm/llvm-project/mlir:AffineDialect",
        "//third_party/llvm/llvm-project/mlir:AffineToStandard",
        "//third_party/llvm/llvm-project/mlir:AffineUtils",
        "//third_party/llvm/llvm-project/mlir:ArithDialect",
        "//third_party/llvm/llvm-project/mlir:ArithToLLVM",
        "//third_party/llvm/llvm-project/mlir:ArithTransforms",
        "//third_party/llvm/llvm-project/mlir:CallOpInterfaces",
        "//third_party/llvm/llvm-project/mlir:ComplexDialect",
        "//third_party/llvm/llvm-project/mlir:ComplexToLLVM",
        "//third_party/llvm/llvm-project/mlir:ControlFlowToLLVM",
        "//third_party/llvm/llvm-project/mlir:DataLayoutInterfaces",
        "//third_party/llvm/llvm-project/mlir:DialectUtils",
        "//third_party/llvm/llvm-project/mlir:FuncDialect",
        "//third_party/llvm/llvm-project/mlir:FuncToLLVM",
        "//third_party/llvm/llvm-project/mlir:GPUDialect",
        "//third_party/llvm/llvm-project/mlir:GPUToNVVMTransforms",
        "//third_party/llvm/llvm-project/mlir:IR",
        "//third_party/llvm/llvm-project/mlir:LLVMCommonConversion",
        "//third_party/llvm/llvm-project/mlir:LLVMDialect",
        "//third_party/llvm/llvm-project/mlir:MathDialect",
        "//third_party/llvm/llvm-project/mlir:MathToLLVM",
        "//third_party/llvm/llvm-project/mlir:MathTransforms",
        "//third_party/llvm/llvm-project/mlir:NVVMDialect",
        "//third_party/llvm/llvm-project/mlir:Pass",
        "//third_party/llvm/llvm-project/mlir:SCFDialect",
        "//third_party/llvm/llvm-project/mlir:SCFToControlFlow",
        "//third_party/llvm/llvm-project/mlir:SCFUtils",
        "//third_party/llvm/llvm-project/mlir:Support",
        "//third_party/llvm/llvm-project/mlir:TensorDialect",
        "//third_party/llvm/llvm-project/mlir:TransformUtils",
        "//third_party/llvm/llvm-project/mlir:VectorDialect",
        "//third_party/llvm/llvm-project/mlir:VectorToLLVM",
        "//third_party/llvm/llvm-project/mlir:VectorTransforms",
        "//xla:shape_util",
        "//xla:util",
        "//xla:xla_data_proto_cc",
        "//xla/mlir_hlo",
        "//xla/mlir_hlo:map_mhlo_to_scalar_op",
        "//xla/service/gpu:ir_emission_utils",
        "//xla/service/gpu/fusions/mlir/ir:xla_gpu",
        "//xla/service/gpu/model:indexing_analysis",
        "//xla/stream_executor:device_description",
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "type_util",
    srcs = ["type_util.cc"],
    hdrs = ["type_util.h"],
    deps = [
        "//third_party/llvm/llvm-project/llvm:Support",
        "//third_party/llvm/llvm-project/mlir:IR",
        "//xla:shape_util",
        "//xla:xla_data_proto_cc",
        "//xla/mlir/utils:type_util",
        "//xla/translate/hlo_to_mhlo:hlo_utils",
        "@com_google_absl//absl/log:check",
    ],
)

xla_cc_test(
    name = "type_util_test",
    srcs = ["type_util_test.cc"],
    deps = [
        ":type_util",
        "//third_party/llvm/llvm-project/llvm:Support",
        "//third_party/llvm/llvm-project/mlir:IR",
        "//xla:shape_util",
        "//xla:xla_data_proto_cc",
        "//xla/tests:xla_internal_test_main",
        "@com_google_googletest//:gtest",
    ],
)
